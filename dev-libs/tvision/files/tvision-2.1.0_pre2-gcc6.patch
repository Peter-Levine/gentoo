Bug: https://bugs.gentoo.org/594176

--- a/classes/dos/sescreen.cc
+++ b/classes/dos/sescreen.cc
@@ -248,6 +248,8 @@
 static int TextModeXres;
 static int TextModeYres;
 
+#define tdisplay_abs(x) ((x)>0?(x):-(x))
+
 /*****************************************************************************
 
 ***************************  VESA BIOS ROUTINES ******************************
@@ -1227,11 +1229,11 @@
       do {
 	 x1 = (rand() & 255) + 32;
 	 x2 = (rand() & 255) + 32;
-      } while (abs(x1-x2) < 30);
+      } while (tdisplay_abs(x1-x2) < 30);
       do {
 	 y1 = (rand() & 127) + 40;
 	 y2 = (rand() & 127) + 40;
-      } while (abs(y1-y2) < 20);
+      } while (tdisplay_abs(y1-y2) < 20);
       set_clip(screen, xoff+x1, yoff+y1, xoff+x2, yoff+y2);
    }
 
--- a/classes/tdesktop.cc
+++ b/classes/tdesktop.cc
@@ -15,6 +15,8 @@
 // they can inconditionally declare symbols like NULL
 #include <stdlib.h>
 
+#define tdisplay_abs(x) ((x)>0?(x):-(x))
+
 #define Uses_TDeskTop
 #define Uses_TRect
 #define Uses_TPoint
@@ -144,7 +146,7 @@
 {
     unsigned res1 = 2;
     unsigned res2 = i/res1;
-    while( abs( res1 - res2 ) > 1 )
+    while( tdisplay_abs( res1 - res2 ) > 1 )
         {
         res1 = (res1 + res2)/2;
         res2 = i/res1;
--- a/classes/tdisplay.cc
+++ b/classes/tdisplay.cc
@@ -15,6 +15,8 @@
   
 ***************************************************************************/
 
+#define tdisplay_abs(x) ((x)>0?(x):-(x))
+
 //#define DEBUG_CURSOR
 #define Uses_stdio
 #define Uses_stdlib
@@ -381,10 +383,10 @@
  if (firstXMatch!=-1)
    {// Return the closest y that match x
     i=indexMin=firstXMatch;
-    minDif=abs(res[i].y-y);
+    minDif=tdisplay_abs(res[i].y-y);
     while (++i<cant && res[i].x==x)
       {
-       dif=abs(res[i].y-y);
+       dif=tdisplay_abs(res[i].y-y);
        if (dif<minDif)
          {
           minDif=dif;
@@ -396,11 +398,11 @@
    }
  // No x match, looks the one with minimum differences
  indexMin=0;
- minDif=abs(res[0].y-y)+abs(res[0].x-x);
+ minDif=tdisplay_abs(res[0].y-y)+tdisplay_abs(res[0].x-x);
  i=1;
  while (i<cant)
    {
-    dif=abs(res[i].y-y)+abs(res[i].x-x);
+    dif=tdisplay_abs(res[i].y-y)+tdisplay_abs(res[i].x-x);
     if (dif<minDif)
       {
        minDif=dif;
--- a/classes/tvtext1.cc
+++ b/classes/tvtext1.cc
@@ -110,10 +110,10 @@
 char TCheckBoxes::button[] = " [ ] ";
 char TCheckBoxes::obutton[] = " [ ] ";
 
-TScrollChars TScrollBar::vChars = {30, 31, 177, 254, 178};
-TScrollChars TScrollBar::ovChars = {30, 31, 177, 254, 178};
-TScrollChars TScrollBar::hChars = {17, 16, 177, 254, 178};
-TScrollChars TScrollBar::ohChars = {17, 16, 177, 254, 178};
+TScrollChars TScrollBar::vChars = {30, 31, (char) 177, (char) 254, (char) 178};
+TScrollChars TScrollBar::ovChars = {30, 31, (char) 177, (char) 254, (char) 178};
+TScrollChars TScrollBar::hChars = {17, 16, (char) 177, (char) 254, (char) 178};
+TScrollChars TScrollBar::ohChars = {17, 16, (char) 177, (char) 254, (char) 178};
 
 char TButton::shadows[] = "\xDC\xDB\xDF"; // ÜÛß
 char TButton::oshadows[] = "\xDC\xDB\xDF"; // ÜÛß
--- a/classes/x11/x11src.cc
+++ b/classes/x11/x11src.cc
@@ -84,6 +84,8 @@
  #include <pthread.h>
 #endif
 
+#define tdisplay_abs(x) ((x)>0?(x):-(x))
+
 #ifdef TVOSf_Solaris
  // At least in the Solaris 7 box I tested looks like ITIMER_REAL is broken
  // and behaves like ITIMER_VIRTUAL
@@ -2457,8 +2459,8 @@
  else
    {
     unsigned target=fW*fH;
-    int dif1=abs(8*16-target);
-    int dif2=abs(10*20-target);
+    int dif1=tdisplay_abs(8*16-target);
+    int dif2=tdisplay_abs(10*20-target);
     if (dif1<dif2)
        nFont=&font8x16;
     else
@@ -2555,49 +2557,49 @@
        TScreenX11::leftPtr;
 char   TScreenX11::busyCursorMap[]=
 {
- 0xff, 0xff, 0xff, 0x1f,
- 0xfd, 0xff, 0xff, 0x1f,
- 0xf9, 0xff, 0xff, 0x1f,
- 0xf1, 0xff, 0xff, 0x1f,
- 0xe1, 0x7f, 0xc0, 0x1f,
- 0xc1, 0x7f, 0xc0, 0x1f,
- 0x81, 0x3f, 0x80, 0x1f,
- 0x01, 0x9f, 0x3b, 0x1f,
- 0x01, 0xce, 0x7b, 0x1e,
- 0xc1, 0xef, 0xfb, 0x1e,
- 0xc9, 0xef, 0xf1, 0x18,
- 0x9d, 0xef, 0xf1, 0x18,
- 0x9f, 0xef, 0xfe, 0x18,
- 0x3f, 0x6f, 0xff, 0x1e,
- 0x3f, 0xcf, 0x7f, 0x1e,
- 0xff, 0x9f, 0x3f, 0x1f,
- 0xff, 0x3f, 0x80, 0x1f,
- 0xff, 0x7f, 0xc0, 0x1f,
- 0xff, 0x7f, 0xc0, 0x1f,
- 0xff, 0xff, 0xff, 0x1f
+ (char)0xff, (char)0xff, (char)0xff, (char)0x1f,
+ (char)0xfd, (char)0xff, (char)0xff, (char)0x1f,
+ (char)0xf9, (char)0xff, (char)0xff, (char)0x1f,
+ (char)0xf1, (char)0xff, (char)0xff, (char)0x1f,
+ (char)0xe1, (char)0x7f, (char)0xc0, (char)0x1f,
+ (char)0xc1, (char)0x7f, (char)0xc0, (char)0x1f,
+ (char)0x81, (char)0x3f, (char)0x80, (char)0x1f,
+ (char)0x01, (char)0x9f, (char)0x3b, (char)0x1f,
+ (char)0x01, (char)0xce, (char)0x7b, (char)0x1e,
+ (char)0xc1, (char)0xef, (char)0xfb, (char)0x1e,
+ (char)0xc9, (char)0xef, (char)0xf1, (char)0x18,
+ (char)0x9d, (char)0xef, (char)0xf1, (char)0x18,
+ (char)0x9f, (char)0xef, (char)0xfe, (char)0x18,
+ (char)0x3f, (char)0x6f, (char)0xff, (char)0x1e,
+ (char)0x3f, (char)0xcf, (char)0x7f, (char)0x1e,
+ (char)0xff, (char)0x9f, (char)0x3f, (char)0x1f,
+ (char)0xff, (char)0x3f, (char)0x80, (char)0x1f,
+ (char)0xff, (char)0x7f, (char)0xc0, (char)0x1f,
+ (char)0xff, (char)0x7f, (char)0xc0, (char)0x1f,
+ (char)0xff, (char)0xff, (char)0xff, (char)0x1f
 };
 char TScreenX11::busyCursorMask[]=
 {
- 0xfc, 0xff, 0xff, 0x1f,
- 0xf8, 0xff, 0xff, 0x1f,
- 0xf0, 0xff, 0xff, 0x1f,
- 0xe0, 0x3f, 0x80, 0x1f,
- 0xc0, 0x3f, 0x80, 0x1f,
- 0x80, 0x3f, 0x80, 0x1f,
- 0x00, 0x1f, 0x00, 0x1f,
- 0x00, 0x0e, 0x00, 0x1e,
- 0x00, 0x04, 0x00, 0x1c,
- 0x00, 0x04, 0x00, 0x10,
- 0x80, 0x07, 0x00, 0x10,
- 0x08, 0x07, 0x00, 0x10,
- 0x0c, 0x07, 0x00, 0x10,
- 0x1f, 0x06, 0x00, 0x10,
- 0x1f, 0x06, 0x00, 0x1c,
- 0x3f, 0x0f, 0x00, 0x1e,
- 0xff, 0x1f, 0x00, 0x1f,
- 0xff, 0x3f, 0x80, 0x1f,
- 0xff, 0x3f, 0x80, 0x1f,
- 0xff, 0x3f, 0x80, 0x1f
+ (char)0xfc, (char)0xff, (char)0xff, (char)0x1f,
+ (char)0xf8, (char)0xff, (char)0xff, (char)0x1f,
+ (char)0xf0, (char)0xff, (char)0xff, (char)0x1f,
+ (char)0xe0, (char)0x3f, (char)0x80, (char)0x1f,
+ (char)0xc0, (char)0x3f, (char)0x80, (char)0x1f,
+ (char)0x80, (char)0x3f, (char)0x80, (char)0x1f,
+ (char)0x00, (char)0x1f, (char)0x00, (char)0x1f,
+ (char)0x00, (char)0x0e, (char)0x00, (char)0x1e,
+ (char)0x00, (char)0x04, (char)0x00, (char)0x1c,
+ (char)0x00, (char)0x04, (char)0x00, (char)0x10,
+ (char)0x80, (char)0x07, (char)0x00, (char)0x10,
+ (char)0x08, (char)0x07, (char)0x00, (char)0x10,
+ (char)0x0c, (char)0x07, (char)0x00, (char)0x10,
+ (char)0x1f, (char)0x06, (char)0x00, (char)0x10,
+ (char)0x1f, (char)0x06, (char)0x00, (char)0x1c,
+ (char)0x3f, (char)0x0f, (char)0x00, (char)0x1e,
+ (char)0xff, (char)0x1f, (char)0x00, (char)0x1f,
+ (char)0xff, (char)0x3f, (char)0x80, (char)0x1f,
+ (char)0xff, (char)0x3f, (char)0x80, (char)0x1f,
+ (char)0xff, (char)0x3f, (char)0x80, (char)0x1f
 };
 
 /* This is the function which creates cursors. On success it return
